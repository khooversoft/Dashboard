@using DashboardMgmt.Application.Menu;
@using DashboardMgmt.Model;
@using DashboardMgmt.Services;
@using Dashboard.sdk.Records;
@using Toolbox.StateValidation;

@inject IJSRuntime _js;


@inject EngagementStore _store;

<RightPanel @ref="RightPanel" WidthLevel="3">
    <Title>@Title</Title>
    <Body>

        <EditForm EditContext="@EditContext">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Provider <RequiredSymbol /></label>
                <InputText Id=@_startFocusId class=@FormControllClass DisplayName="Provider's name" @bind-Value="Model.Provider" disabled=@IsDisabled />
                <ValidationMessage For=@(() => Model.Provider) />
            </div>

            <div class="row align-items-center">
                <label class="col-md-1" style="min-width:5rem">Show</label>
                <ToggleButtonSwitch @bind-Value="ButtonIndex" Buttons="SwitchButtons" />
            </div>
        </EditForm>

    </Body>
    <Footer>
        <NavLink @onclick="CreateOrUpdate" class="btn alert-success">@CreateOrUpdateText</NavLink>
        <NavLink @onclick="() => RightPanel.Close()" class="btn btn-light">Cancel</NavLink>
    </Footer>
</RightPanel>


@code {
    [Parameter]
    public int? ProviderId { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; } = null!;

    public ProviderModel Model { get; set; } = new();

    private RightPanel RightPanel { get; set; } = null!;

    private EditContext EditContext { get; set; } = null!;

    private int ButtonIndex { get => Model.Show ? 1 : 0; set => Model.Show = value switch { 0 => false, _ => true }; }

    private static IReadOnlyList<string> SwitchButtons => new[] { "No", "Yes" };

    private const string _startFocusId = "start-focus";
    private const string _existFocusId = "exist-focus";

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Model);

        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProviderId != null)
        {
            ProviderModel? record = (await _store.Client.Provider.List(providerId: (int)ProviderId)).FirstOrDefault()?.ConvertTo();
            if (record != null)
            {
                Model.Provider = record.Provider;
                Model.Show = record.Show;
            }
        }
        else
        {
            Model.Provider = string.Empty;
            Model.Show = true;
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ProviderId != null)
        {
            await _js.InvokeVoidAsync("focusInputOnId", _startFocusId);
        }
    }

    private bool IsAdd => IsAdd;
    private string CreateOrUpdateText => IsAdd ? "Create" : "Save";
    private string Title => (IsAdd ? "Create" : "Update") + " Provider";
    private string FormControllClass => "form-control" + (IsDisabled ? " disabled" : string.Empty);
    private string Attribute => (ProviderId != null ? "disabled" : string.Empty);
    private bool IsDisabled => ProviderId != null;

    public void Open() => RightPanel.Open();
    public void Close() => RightPanel.Close();

    private Task OnCancel()
    {
        Close();
        return Task.CompletedTask;
    }

    private async Task CreateOrUpdate()
    {
        bool validationState = EditContext.Validate();
        if (!validationState) return;

        await _store.Client.Provider.Set(Model.Provider, Model.Show);

        Close();
        await Callback();
    }
}
