@using DashboardMgmt.Model;
@using DashboardMgmt.Services;
@using DashboardMgmt.Application;


@inject EngagementStore _store;

<RightPanelForm @ref=@RightPanelForm TItem="ProviderModel" Model="Model" IsNew="IsNew" ObjectType="Provider" OnSet="CreateOrUpdate">
    <FormBody>

        <div class="form-group">
            <label>Provider <RequiredSymbol /></label>
            <InputText Id=@Constants.StartFocusId class="form-control" DisplayName="Provider's name" @bind-Value="Model.Provider" disabled=@IsDisabled />
            <ValidationMessage For=@(() => Model.Provider) />
        </div>

        <div class="row align-items-center">
            <label class="col-md-1 mt-2" style="min-width:5rem">Show</label>
            <ToggleRadio @bind-Value="Model.Show" />
        </div>

    </FormBody>
</RightPanelForm>


@code {
    [Parameter]
    public int? ProviderId { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; } = null!;

    private RightPanelForm<ProviderModel> RightPanelForm { get; set; } = null!;
    private ProviderModel Model { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        Model.Reset();

        if (ProviderId != null)
        {
            ProviderModel? record = (await _store.Client.Provider.List(providerId: (int)ProviderId)).FirstOrDefault()?.ConvertTo();
            if (record != null)
            {
                Model.Provider = record.Provider;
                Model.Show = record.Show;
            }
        }
    }

    private bool IsNew => ProviderId == null;
    private bool IsDisabled => !IsNew;

    public void Open() => RightPanelForm.Open();
    public void Close() => RightPanelForm.Close();

    private async Task CreateOrUpdate()
    {
        await _store.Client.Provider.Set(Model.Provider, Model.Show);
        await Callback();
    }
}
