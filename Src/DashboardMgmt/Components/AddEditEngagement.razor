@using DashboardMgmt.Model;
@using DashboardMgmt.Services;
@using DashboardMgmt.Application;


@inject EngagementStore _store;

<RightPanelForm @ref=@RightPanelForm TItem="StageHistoryModel" Model="Model" IsNew="IsNew" ObjectType="Stage" OnSet="CreateOrUpdate">
    <FormBody>

        <div class="form-group">
            <label>Provider <RequiredSymbol /></label>
            <InputSelect Id=@Constants.StartFocusId @bind-Value="Model.Provider" class="form-control" disabled=@IsDisabled>
                @foreach (var item in Providers)
                {
                    <option>@item.Provider</option>
                }
            </InputSelect>
            <ValidationMessage For=@(() => Model.Provider) />
        </div>

        <div class="form-group">
            <label>Stage <RequiredSymbol /></label>
            <InputSelect @bind-Value="Model.Stage" class="form-control" disabled=@IsDisabled>
                @foreach (var item in Stages)
                {
                    <option>@item.Stage</option>
                }
            </InputSelect>
            <ValidationMessage For=@(() => Model.Stage) />
        </div>

        <div class="form-group">
            <label>Start Date</label>
            <InputDate class="form-control" DisplayName="Stage" @bind-Value="Model.StartDate" />
        </div>

        <div class="form-group">
            <label>Completed Date</label>
            <InputDate class="form-control" DisplayName="Stage" @bind-Value="Model.CompletedDate" />
        </div>

    </FormBody>
</RightPanelForm>



@code {
    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; } = null!;

    private RightPanelForm<StageHistoryModel> RightPanelForm { get; set; } = null!;
    private StageHistoryModel Model { get; set; } = new();

    private bool IsNew => Id == null;
    private bool IsDisabled => !IsNew;

    private IReadOnlyList<ProviderModel> Providers { get; set; } = Array.Empty<ProviderModel>();
    private IReadOnlyList<StageModel> Stages { get; set; } = Array.Empty<StageModel>();

    protected override async Task OnParametersSetAsync()
    {
        Providers = (await _store.Client.Provider.List()).Select(x => x.ConvertTo()).ToList();
        Stages = (await _store.Client.Stage.List()).Select(x => x.ConvertTo()).ToList();

        Model.Reset();

        if (Id != null)
        {
            StageHistoryModel? record = (await _store.Client.StageHistory.List(stageHistoryId: Id)).FirstOrDefault()?.ConvertTo();
            if (record != null)
            {
                Model.Provider = record.Provider;
                Model.Stage = record.Stage;
                Model.StartDate = record.StartDate;
                Model.CompletedDate = record.CompletedDate;
            }
        }
    }

    public void Open() => RightPanelForm.Open();

    private async Task CreateOrUpdate()
    {
        await _store.Client.StageHistory.Set(Model.Provider, Model.Stage, Model.StartDate, Model.CompletedDate);
        await Callback();
    }
}
