@*@using Toolbox.Extensions;
@using System.Linq.Expressions;

@implements IDisposable

@foreach (var message in ValidationMessages)
{
    <div class="validation-message">@message <span>hello</span></div>
}


@code {
    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;

    [Parameter]
    public Expression<Func<string>> For { get; set; } = null!;

    private FieldIdentifier _fieldIdentifier;
    private EventHandler<ValidationStateChangedEventArgs> _stateChangeHandler => (sender, args) => StateHasChanged();

    protected IEnumerable<string> ValidationMessages => EditContext.GetValidationMessages(_fieldIdentifier);

    protected override void OnInitialized()
    {
        _fieldIdentifier = FieldIdentifier.Create(For);
        EditContext.OnValidationStateChanged += _stateChangeHandler;
    }

    public void Dispose()
    {
        EditContext.OnValidationStateChanged -= _stateChangeHandler;
    }
}*@
