@page "/current"

@using DashboardMgmt.Application.Menu;
@using DashboardMgmt.Components;
@using DashboardMgmt.Services;
@using Dashboard.sdk.Records;

@inject EngagementStore _store;

<ConfirmDelete @ref="DeletePanel" Title="Delete Engagement" ObjectName="Engagement" DeleteName=@GetDeleteName() DeleteAction="async () => await Delete()"/>

<AddEditEngagement @ref="EditPanel" Callback="async () => await Refresh()" Id=@SelectedId />

<PageHeader Header="Engagement" SubHeader="Current" />

<PageMenu MenuCollection="@MenuCollection" />

<div class="mt-4">
    <table class="table table-hover table-striped table-sm">
        <thead>
            <tr>
                <th style="width:37%">Provider</th>
                <th style="width:36%">Stage</th>
                <th style="width:10%">Start Date</th>
                <th style="width:10%">Completed Date</th>
                <th>**</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in Records)
            {
                string trClass = SelectedId == record.StageHistoryId ? "table-primary" : string.Empty;

                <tr class="@trClass" @onclick="() => RowClick(record.StageHistoryId)">
                    <td>@record.Provider</td>
                    <td>@record.Stage</td>
                    <td>@(record.StartDate?.ToShortDateString() ?? string.Empty)</td>
                    <td>@(record.CompletedDate?.ToShortDateString() ?? string.Empty)</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private MenuCollection MenuCollection { get; set; } = null!;
    private IReadOnlyList<StageHistoryRecord> Records { get; set; } = new List<StageHistoryRecord>();
    private int? SelectedId { get; set; } = null;
    private AddEditEngagement EditPanel { get; set; } = null!;
    private ConfirmDelete DeletePanel { get; set; } = null!;

    private string GetDeleteName() => Records.Where(x => x.StageHistoryId == SelectedId).FirstOrDefault()?.FriendlyName()?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SetMenu();
        await Refresh();
        await base.OnInitializedAsync();
    }

    private void RowClick(int id)
    {
        SelectedId = id;
        SetMenu();
    }

    private void SetMenu()
    {
        MenuCollection = new MenuCollection
{
            new MenuButton("Add", OnAdd, "oi-plus", true),
            new MenuButton("Edit", OnEdit, "oi-plus", SelectedId != null),
            new MenuDivider(),
            new MenuButton("Delete", OnDelete, "oi-circle-x", SelectedId != null),
            new MenuButton("Refresh", Refresh, "oi-reload", true),
        };
    }

    private async Task Refresh()
    {
        Records = await _store.Client.StageHistory.List();
        SelectedId = null;
        SetMenu();

        StateHasChanged();
    }

    private Task OnAdd()
    {
        SelectedId = null;
        EditPanel.Open();
        return Task.CompletedTask;
    }

    private Task OnEdit()
    {
        EditPanel.Open();
        return Task.CompletedTask;
    }

    private Task OnDelete()
    {
        DeletePanel.Open();
        return Task.CompletedTask;
    }

    private async Task Delete()
    {
        if (SelectedId == null) return;

        StageHistoryRecord? record = Records.Where(x => x.StageHistoryId == (int)SelectedId).FirstOrDefault();
        if (record == null) return;

        await _store.Client.StageHistory.Delete(record.Provider, record.Stage);
        await Refresh();
    }
}