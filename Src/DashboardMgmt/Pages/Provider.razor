@page "/provider"

@using DashboardMgmt.Application.Menu;
@using DashboardMgmt.Components;
@using DashboardMgmt.Services;
@using Dashboard.sdk.Records;

@inject EngagementStore _store;


<RightPanel @ref="RightPanel">
    <Title>Delete Provider</Title>
    <Body>
        <p>
            Do you want to delete <span class="font-weight-bold">@Id</span> metadata?
        </p>

        <div class="alert alert-warning" role="alert">
            Warning, this will delete the metadata and is not recoverable without re-adding.
        </div>

    </Body>
    <Footer>
        <NavLink @onclick="Delete" class="btn btn-primary model-normal-button">Delete</NavLink>
        <button type="button" class="btn btn-light model-close-button" data-dismiss="modal" @onclick="() => RightPanel.Close()">Close</button>
    </Footer>
</RightPanel>


<PageHeader Header="Provider" SubHeader="Maintenance" />

<PageMenu MenuCollection="@MenuCollection" />

<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th style="width:70%">Provider</th>
            <th style="width:20%">Show in Report</th>
            <th>**</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var record in Records)
        {
            <tr>
                <td>@record.Provider</td>
                <td>@(record.Show ? "True" : "False")</td>
            </tr>
        }
    </tbody>
</table>



@code {
    private MenuCollection MenuCollection { get; set; } = null!;

    private IReadOnlyList<ProviderRecord> Records { get; set; } = new List<ProviderRecord>();

    private RightPanel RightPanel { get; set; } = null!;

    private int Id = 0;

    protected override void OnParametersSet()
    {
        MenuCollection = new MenuCollection()
{
            new MenuItem("Add", $"stage/add", "oi-plus", true),
            new MenuDivider(),
            new MenuButton("Delete", ShowDelete, "oi-circle-x", true),
        };

        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Records = await _store.Client.Provider.List();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Task ShowDelete()
    {
        RightPanel.Open();
        return Task.CompletedTask;
    }

    private void Delete()
    {

    }
}