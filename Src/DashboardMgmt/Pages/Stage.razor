@page "/stage"

@using DashboardMgmt.Application.Menu;
@using DashboardMgmt.Components;
@using DashboardMgmt.Services;
@using Dashboard.sdk.Records;

@inject EngagementStore _store;

<ConfirmDelete @ref="DeletePanel" Title="Delete Provider" ObjectName="Provider" DeleteName=@GetDeleteName() DeleteAction="async () => await Delete()" />

<AddEditStage @ref="EditPanel" Callback="async () => await Refresh()" StageId=@SelectedId />

<PageHeader Header="Stage" SubHeader="Maintenance" />

<PageMenu MenuCollection="@MenuCollection" />

<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th style="width:70%">Stage</th>
            <th style="width:20%">Order Number</th>
            <th>**</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var record in Records)
        {
            string trClass = SelectedId == record.StageId ? "table-primary" : string.Empty;

            <tr class="@trClass" @onclick="() => RowClick(record.StageId)">
                <td>@record.Stage</td>
                <td>@record.OrderNumber</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private MenuCollection MenuCollection { get; set; } = null!;
    private AddEditStage EditPanel { get; set; } = null!;
    private ConfirmDelete DeletePanel { get; set; } = null!;
    private IReadOnlyList<StageRecord> Records { get; set; } = new List<StageRecord>();
    private int? SelectedId { get; set; } = null;
    private string GetDeleteName() => Records.Where(x => x.StageId == SelectedId).FirstOrDefault()?.Stage ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SetMenu();
        await Refresh();
        await base.OnInitializedAsync();
    }

    private void RowClick(int id)
    {
        SelectedId = id;
        SetMenu();
    }

    private void SetMenu()
    {
        MenuCollection = new MenuCollection
{
            new MenuButton("Add", OnAdd, "oi-plus", true),
            new MenuButton("Edit", OnEdit, "oi-plus", SelectedId != null),
            new MenuDivider(),
            new MenuButton("Delete", OnDelete, "oi-circle-x", SelectedId != null),
            new MenuButton("Refresh", Refresh, "oi-reload", true),
        };
    }

    private async Task Refresh()
    {
        Records = (await _store.Client.Stage.List()).OrderBy(x => x.Stage).ToArray();
        SelectedId = null;
        SetMenu();

        StateHasChanged();
    }

    private Task OnAdd()
    {
        SelectedId = null;
        EditPanel.Open();
        return Task.CompletedTask;
    }

    private Task OnEdit()
    {
        EditPanel.Open();
        return Task.CompletedTask;
    }

    private Task OnDelete()
    {
        DeletePanel.Open();
        return Task.CompletedTask;
    }

    private async Task Delete()
    {
        DeletePanel.Close();

        if (SelectedId == null) return;

        StageRecord? record = Records.Where(x => x.StageId == (int)SelectedId).FirstOrDefault();
        if (record == null) return;

        await _store.Client.Provider.Delete(record.Stage);
        await Refresh();
    }
}